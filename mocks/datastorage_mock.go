// Code generated by MockGen. DO NOT EDIT.
// Source: datastorage/datastorage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataStorage is a mock of DataStorage interface
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// CreateTable mocks base method
func (m *MockDataStorage) CreateTable(model interface{}) {
	m.ctrl.Call(m, "CreateTable", model)
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockDataStorageMockRecorder) CreateTable(model interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDataStorage)(nil).CreateTable), model)
}

// StoreCIBuild mocks base method
func (m *MockDataStorage) StoreCIBuild(model interface{}) error {
	ret := m.ctrl.Call(m, "StoreCIBuild", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCIBuild indicates an expected call of StoreCIBuild
func (mr *MockDataStorageMockRecorder) StoreCIBuild(model interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCIBuild", reflect.TypeOf((*MockDataStorage)(nil).StoreCIBuild), model)
}
